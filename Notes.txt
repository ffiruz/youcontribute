Github üzerinden projeyi geliştireceğiz.

1.cmd ekranından projenin olduğu yere git ve -> git init  -> Boş bir reository oluşturur.
2.gh repo create  ->

Not: ->Cmd ve bash ekranlarında "clear" konsolu temizler.

-> Bir spring projesini oluşturmanın birçok yolu olabilir.
Normalde biz spring.io üzerinden projeyi generate ediyorduk.
Diğer yol ise springin kendi cli üzerinde.Otomasyon alanında çok kullanılıyor.Proje yaratmayı otomasyona bindiriyorsak ve mesela microservislerimizi her seferinde yeniden yaratıyorsak  kulanışlı olabilir.
Spring cli indirmek gerekebilir. -> https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.installing.java
İndirilen dosyanın bin uzantısını -> C:\Spring CLI\spring-2.6.3\bin , bu pathi enviroment variables içinde ki Path alanının sonuna ekle.Cli indirilmiş olur.


Spring cli bilgileri:

-->spring init -list  -> Genel paramerrik değerleri bağımlılıkları  için bilgiler bulunur.
->spring init -> bir proje oluşturur.Default
-> spring init --build=gradle --dependencies=web,data-jpa,mysql youcontribute.zip   -> buildi gradle olan ve dependencileri web,data-jpa ve mysql(driver için) olan ve youcontribute zip adını vererek, içinde oluşturmak istediğimizi belittik.
-> Ardından youcontribute.zip dosyası ilgili dizinde oluşacak.Bunu unzip edelim.-> unzip youcontribute.zip 
->Ardından da zip dosyasını silebiliriz.-> rm youcontribute.zip 
->Intellija IDEA da open project diyerek -> Projedeki buid.gradle seçilir.Ve Open as Project seçilir.

Gradle Not:
->Gradle ile bağımlılıklarımız yönetilebilir olacak.Projeyi konfigure etmemizi sağlayacak.
Gradle için de bir wrapper dosyası var.Bu dosyanın içinde properties ve jar dosyası var.gradle-wrapper.properties,gradle-wrapper.jar dosyaları.Bu dosyalar eğer lokalinde gradle olmasa dahi gradle kurululumunu kendi yapar.

Intellij IDEA not:
Pluggin-> Presentation Assistant = Kısayolları daha rahat kullanmamızı sağlayan bir plugin
IDEA da double  shift(iki defa shift ) tuşuna basarsak  ,  istediğimiz şeyi aratabiliriz.
Örnek vermek istersek elimizde bir kod blogu var ve bunu yorum satırına almak istiyoruz.Kodu seçip double shift dersek , gelen aramada da comment diye aratırsak direk bize yardımcı olur.
Yani kısa yolları hatırlamadığımızda double shift bize yardımcı olacaktır.
->Shift+F6 -> Refactor
->Projeyi IDE üzerinden de çalıştırabiliriz.

Console üzerinden çalıştırmak için.--> ./gradlew bootRun 
(Burada fail alabilir.Çünkü dependecyleri bazı configlerini de ayağa kaldırmalıyız.Mesela ben mysql kullandım ama herhangi bir config,url vs tanımlamadım."Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.")
Bunu docker ile çözelim.

Ardında
->  docker run --name some-mysql  -p 3306:3306 -e MYSQL_ROOT_PASSWORD=my-secret-pw -e MYSQL_DATABASE=youcontribute -d mysql:5.7 -> youcontribute adından database i olan bir mysql image ayağa kaldıracak.
  


Spring boot , build.gradle dosyasındaki configlerle çalışır ve o şekilde tanır.(pom gibi)

->Mesela lombock u projeye import etmek istiyoruz.Öncelikle build.gradle dosyasına dependecy'i ekleyeceğiz.Ardından Intellije Idea da   compiler->Annotation->Enable >Annotation Processing
-> https://projectlombok.org/setup/gradle  -> lombock dependecy

Projede application.yaml formatını kullanacağız.Ve değişkenleri dinamik yapacağız.


--> Normal de application.properties içerisine eklediğimiz alanları Edit-Configuration->Enviroment Variables içerisine de ekleyerek yapabiliriz.

Console üzerinden çalıştırmak için.--> ./gradlew bootRun  -> bash kullan.


curl -XPOST -H  'Content-Type: application/json'  -d '{}' http://localhost:8080/repositories   --> Cmd ekranondan ilgili pathe bağlanma ve request atma->Post isteği

curl -XPOST -H "Content-Type: application/json"  -d  '{"repository":"test","organization":"test2"}'  http://localhost:8080/repositories


Spring Boot Actuator-> Metrik sağlar.
Quartz Scheduler->Cron job sağlar.


UNIT TEST

->Projeyi Spring cli veya spring.io dan indirdiğimizde bize bir test classı sağlar.Ve contextLoad adından bir test metodu sağlar.

ContextLoad içerisine bağımlılıklarımızı koyarız.Bu bağımlılıklar servisler vs.Bu contextLoad testleri , bu bağımlılıkların düzgün şekilde kurulup kurulmadığını test etmemizi sağlıyor.

--> test packageının altına kendi resources klasörümüzü koyup , Application.properties veya yaml dosyasını oluşturabiliriz.Böylece normalde ki Application.properties(proda çıkan) dosyasından ayırmış oluruz.
Böylece kendi testlerimiz için H2 database vs .kolay entegre olabilen bir db configlerini yazabiliriz. (H2->Dependenciysini build.gradle ekle.)

Controller testi.  -> Controller classının üztüne ctrk+shift+t ile direk (veya go to seçeneğindne) test classına gidebiliriz veya oluşturabiliriz.Package vs düzenlememize gerek yok.Düzgün oluşturacaktır.
JUNIT 4 de @SpringRunnerWithTest vs yazıyorduk.Ancak JUNIT 5 ile birçok özellik geldi.@ExtendWith anatasyonunu class başına yazıyoruz.
  

Repository Test --> Integration tesi.Integration testlerin sonunda IT eklenir genelde.


Github --> base Url : https://api.github.com/  ->Postmen içerisinde Enviroment da key value olarak set edebiliriz.
key:github_base , value: https://api.github.com/  -> ulaşmak içi: {{github_base}} kullanabiliriz.


-> Http protokolleri
PATCH -> partial update(kısimi güncelleme):Bir product objemiz (table) olsun.Ve bunun üzerinden kaç defa bakıldığına dair bir data tutuyoruz.Mesela sayfaya bir ziyaret olduğunda product'ın bütün datasının değiştirilmesi yerine , ilgili fieldı güncelleme.
PUT->Hangi fieldın değiştiği ile ilgilenmiyoruz.Çünkü elimiz de objenin son hali var.PUT ile db de ki datayı komple güncelleme.



Dış Entegrasyon hk.

Eğer projemizde dış bir client'a (entegrasyona) bağlanılırken ,  davranışı singleton mı olmalı veya birden fazla new ile oluşturmalımıyım.Sibngleton ise bir bean ile bunu tanımlamalıyız.

Github client için dependecy: https://mvnrepository.com/artifact/org.eclipse.mylyn.github/org.eclipse.egit.github.core

Spring de bean tanımlamaları vs config aslı bir paket oluşturularak , paketin içerisinde yapılması kararlılık katar.

-> Confidental (gizi) dataları proje içerisine yazmamız gerekir.(application.properites vs. içerisine).Bunun yerine ${} şeklinde (projede ki token tanımı gibi) ortam değişkeni kullanabiliriz.

-->Java memory management konusuda çok güçlü bir dildir.


-->Spring IOC

Bean tanımı:

    //sistem ayağa kalktığı zmaan , sistemde sadece bir tane github clientının yaşıyor olması.
    @Bean
    public GitHubClient   gitHubClient(final GithubProperties githubProperties)
//Sprinngin Contexine kaydediyoruz.Ve istediğimiz yerden GithubClientı çağırıp kullanabileceğiz.(Mesela GithubClientService)
    {
        GitHubClient gitHubClient= new GitHubClient();
        gitHubClient.setOAuth2Token(githubProperties.getToken());
        return  gitHubClient;
    }



-->JSON Objesini ,Pojo ya çeviren site-> https://json2csharp.com/json-to-pojo


->Intellije IDEA da String manipulation diye bir plugin var.Ve bu plugin , değişkenleri camel case yapısına çevirmede ve birçok özellik konusunda bize yardımcı oluyor.



